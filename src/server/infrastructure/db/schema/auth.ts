/**
 * Better Auth Schema Tables
 * 
 * Generated by Better Auth CLI and moved to proper schema directory.
 * Contains authentication-related tables: user, session, account, verification
 */

import { pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core";
import { user } from "./user";
import { baseFields } from "./base";

// Auto generated by Better Auth CLI, this is disable to use existing user table
// user table is handled in user.ts schema file

export const session = pgTable("session", {
  id: baseFields.id,
  expiresAt: timestamp("expires_at").notNull(),
  token: text("token").notNull().unique(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .$onUpdate(() => new Date())
    .notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: uuid("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
});

export const account = pgTable("account", {
  id: baseFields.id,
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: uuid("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: timestamp("access_token_expires_at"),
  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),
  scope: text("scope"),
  password: text("password"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .$onUpdate(() => new Date())
    .notNull(),
});

export const verification = pgTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: timestamp("expires_at").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .$onUpdate(() => new Date())
    .notNull(),
});

// Export types for Better Auth tables
export type AuthUser = typeof user.$inferSelect;
export type AuthUserInsert = typeof user.$inferInsert;
export type AuthSession = typeof session.$inferSelect;
export type AuthSessionInsert = typeof session.$inferInsert;
export type AuthAccount = typeof account.$inferSelect;
export type AuthAccountInsert = typeof account.$inferInsert;
export type AuthVerification = typeof verification.$inferSelect;
export type AuthVerificationInsert = typeof verification.$inferInsert;